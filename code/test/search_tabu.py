
import _setup
from nose.tools import *

import dataset
import solution
import search

database = dataset.Database.from_id(1)
tabu = search.Tabu(database, solution.Solution(database, []))

def test_one_iteration():
    tabu.search(0.001)

    assert_equal(tabu.iterations, 1)
    assert_equal(tabu.objective, 401)
    assert_equal(tabu.solution.export(), [
        (0, 0, 0, 0), (0, 0, 1, 0), (0, 0, 2, 0), (0, 0, 3, 0), (0, 0, 4, 0),
        (0, 0, 5, 0), (1, 1, 2, 0), (1, 1, 3, 0), (1, 1, 4, 0), (1, 1, 5, 0),
        (2, 2, 0, 0), (2, 2, 1, 0), (2, 2, 2, 0), (2, 2, 3, 0), (2, 2, 4, 0),
        (2, 2, 5, 0), (2, 3, 0, 0), (3, 3, 2, 0), (3, 3, 3, 0), (4, 0, 0, 1),
        (5, 0, 1, 1), (5, 0, 2, 1), (5, 0, 3, 1), (5, 0, 4, 1), (5, 0, 5, 1),
        (5, 1, 0, 1), (5, 1, 1, 1), (5, 1, 2, 1), (6, 1, 3, 1), (6, 1, 4, 1),
        (6, 1, 5, 1), (6, 2, 0, 1), (6, 2, 1, 1), (6, 2, 2, 1), (6, 2, 3, 1),
        (7, 2, 4, 1), (7, 2, 5, 1), (8, 4, 0, 0), (8, 4, 1, 0), (8, 4, 2, 0),
        (8, 4, 3, 0), (9, 4, 4, 0), (9, 4, 5, 0), (10, 3, 0, 1), (10, 3, 1, 1),
        (10, 3, 2, 1), (10, 3, 3, 1), (10, 3, 4, 0), (11, 0, 4, 3), (12, 0, 4, 2),
        (13, 0, 5, 3), (14, 1, 1, 3), (14, 1, 2, 3), (14, 1, 3, 3), (14, 1, 4, 3),
        (14, 1, 5, 3), (15, 0, 4, 4), (16, 0, 0, 5), (16, 0, 1, 5), (16, 0, 2, 5),
        (16, 0, 3, 5), (16, 0, 4, 5), (17, 0, 5, 2), (17, 1, 2, 2), (17, 1, 3, 2),
        (17, 1, 4, 2), (18, 0, 5, 4), (18, 1, 3, 4), (18, 1, 4, 4), (19, 1, 5, 2),
        (19, 2, 1, 2), (19, 2, 2, 2), (19, 2, 3, 2), (20, 0, 5, 5), (20, 1, 0, 5),
        (20, 1, 1, 5), (20, 1, 2, 5), (20, 1, 3, 5), (20, 1, 4, 5), (21, 1, 5, 4),
        (21, 2, 4, 2), (22, 2, 3, 4), (22, 2, 4, 3), (23, 2, 5, 2), (23, 3, 0, 2),
        (23, 3, 1, 2), (23, 3, 2, 2), (23, 3, 3, 2), (23, 3, 4, 1), (24, 2, 0, 5),
        (24, 2, 1, 5), (25, 2, 5, 3), (25, 3, 2, 3), (25, 3, 3, 3), (25, 3, 4, 2),
        (26, 3, 5, 0), (26, 4, 0, 1), (26, 4, 3, 1), (26, 4, 4, 1), (27, 3, 5, 1),
        (27, 4, 0, 2), (27, 4, 1, 2), (27, 4, 2, 2), (27, 4, 3, 2), (27, 4, 4, 2),
        (28, 3, 5, 2), (28, 4, 3, 3), (28, 4, 4, 3), (28, 4, 5, 1), (29, 4, 5, 2),
        (11, 2, 1, 3), (21, 4, 2, 3), (22, 4, 4, 4), (22, 0, 0, 4), (15, 1, 5, 5),
        (21, 0, 1, 2), (11, 2, 2, 3), (24, 4, 5, 5), (21, 0, 2, 2), (24, 0, 2, 3),
        (15, 2, 3, 5), (12, 2, 4, 4), (15, 3, 4, 5), (26, 1, 0, 0), (1, 4, 1, 1),
        (17, 2, 2, 5), (15, 3, 3, 4), (14, 2, 5, 5), (11, 1, 0, 3), (22, 1, 0, 4),
        (26, 1, 1, 0), (17, 3, 2, 5), (18, 4, 2, 5), (24, 1, 2, 4), (18, 2, 4, 5),
        (19, 4, 1, 3), (21, 4, 1, 4), (18, 2, 0, 4), (22, 3, 1, 5), (12, 3, 3, 5),
        (12, 4, 3, 5), (12, 3, 4, 4), (11, 3, 5, 4), (25, 4, 1, 5), (1, 3, 1, 0),
        (3, 4, 2, 1), (25, 4, 2, 4)
    ])

def test_all_iterations():
    tabu.search(60)

    assert_equal(tabu.iterations, 3)
    assert_equal(tabu.objective, 319)
    assert_equal(tabu.solution.export(), [
        (0, 0, 0, 0), (0, 0, 1, 0), (0, 0, 2, 0), (0, 0, 3, 0), (0, 0, 4, 0),
        (0, 0, 5, 0), (1, 1, 2, 0), (1, 1, 3, 0), (1, 1, 4, 0), (1, 1, 5, 0),
        (2, 2, 0, 0), (2, 2, 1, 0), (2, 2, 2, 0), (2, 2, 3, 0), (2, 2, 4, 0),
        (2, 2, 5, 0), (2, 3, 0, 0), (3, 3, 2, 0), (3, 3, 3, 0), (4, 0, 0, 1),
        (5, 0, 1, 1), (5, 0, 2, 1), (5, 0, 3, 1), (5, 0, 4, 1), (5, 0, 5, 1),
        (5, 1, 0, 1), (5, 1, 1, 1), (5, 1, 2, 1), (6, 1, 3, 1), (6, 1, 4, 1),
        (6, 1, 5, 1), (6, 2, 0, 1), (6, 2, 1, 1), (6, 2, 2, 1), (6, 2, 3, 1),
        (7, 2, 4, 1), (7, 2, 5, 1), (8, 4, 0, 0), (8, 4, 1, 0), (8, 4, 2, 0),
        (8, 4, 3, 0), (9, 4, 4, 0), (9, 4, 5, 0), (10, 3, 0, 1), (10, 3, 2, 1),
        (10, 3, 3, 1), (10, 3, 4, 0), (11, 0, 4, 3), (12, 0, 4, 2), (13, 0, 5, 3),
        (14, 1, 1, 3), (14, 1, 2, 3), (14, 1, 3, 3), (14, 1, 4, 3), (14, 1, 5, 3),
        (15, 0, 4, 4), (16, 0, 0, 5), (16, 0, 1, 5), (16, 0, 2, 5), (16, 0, 3, 5),
        (16, 0, 4, 5), (17, 0, 5, 2), (17, 1, 2, 2), (17, 1, 3, 2), (17, 1, 4, 2),
        (18, 0, 5, 4), (18, 1, 3, 4), (18, 1, 4, 4), (19, 1, 5, 2), (19, 2, 1, 2),
        (19, 2, 2, 2), (19, 2, 3, 2), (20, 0, 5, 5), (20, 1, 0, 5), (20, 1, 1, 5),
        (20, 1, 2, 5), (20, 1, 3, 5), (20, 1, 4, 5), (21, 1, 5, 4), (21, 2, 4, 2),
        (22, 2, 3, 4), (22, 2, 4, 3), (23, 2, 5, 2), (23, 3, 0, 2), (23, 3, 1, 2),
        (23, 3, 2, 2), (23, 3, 3, 2), (23, 3, 4, 1), (24, 2, 0, 5), (25, 2, 5, 3),
        (25, 3, 2, 3), (25, 3, 3, 3), (25, 3, 4, 2), (26, 3, 5, 0), (26, 4, 0, 1),
        (26, 4, 3, 1), (26, 4, 4, 1), (27, 3, 5, 1), (27, 4, 0, 2), (27, 4, 1, 2),
        (27, 4, 2, 2), (27, 4, 3, 2), (27, 4, 4, 2), (28, 3, 5, 2), (28, 4, 3, 3),
        (28, 4, 4, 3), (28, 4, 5, 1), (29, 4, 5, 2), (11, 2, 1, 3), (21, 4, 2, 3),
        (22, 4, 4, 4), (22, 0, 0, 4), (15, 1, 5, 5), (21, 0, 1, 2), (11, 2, 2, 3),
        (24, 4, 5, 5), (21, 0, 2, 2), (24, 0, 2, 3), (15, 2, 3, 5), (12, 2, 4, 4),
        (15, 3, 4, 5), (1, 4, 1, 1), (17, 2, 2, 5), (15, 3, 3, 4), (14, 2, 5, 5),
        (11, 1, 0, 3), (26, 1, 1, 0), (17, 3, 2, 5), (18, 4, 2, 5), (24, 1, 2, 4),
        (18, 2, 4, 5), (19, 4, 1, 3), (21, 4, 1, 4), (18, 2, 0, 4), (22, 3, 1, 5),
        (12, 3, 3, 5), (12, 3, 4, 4), (11, 3, 5, 4), (25, 4, 1, 5), (1, 3, 1, 0),
        (3, 4, 2, 1), (25, 4, 2, 4), (28, 0, 3, 2), (29, 0, 1, 3), (29, 0, 2, 4),
        (29, 0, 3, 3), (29, 1, 1, 2), (29, 2, 0, 2), (26, 2, 1, 5), (24, 2, 2, 4),
        (10, 1, 0, 0), (12, 1, 0, 4), (22, 2, 1, 4)
    ])
